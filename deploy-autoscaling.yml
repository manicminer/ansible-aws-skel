---
# ./playbook.sh deploy-autoscaling-alb.yml -e project=lunar -e role=app -e env=production
#
# Swap ALB target groups for the specified auto scaling groups by detaching from one group
# and reattaching to another. First, the group specified by `new_group` has all
# its ALB target groups detached. Then, target groups attached to the group specified by
# `current_group` are also attached to the group specified by `new_group`.
# Once the instances in `new_group` are reporting healthy on the newly attached
# target groups, the same target groups are then detched from `current_group`.
#
# The "post-deploy" target group is then attached to the group specified by
# `current_group_name`. This is done to enable the `current_group` instances to
# continue to be accessible in browser, and also to ensure that ALB health
# checks continue to pass.
#
# If there is no live stage group for the environment, then simply transition
# the pre group to live.

- import_playbook: plays/validate-env.yml
- import_playbook: plays/validate-project.yml
- import_playbook: plays/validate-role.yml

- name: Identify auto scaling groups
  hosts: localhost
  connection: local

  tasks:

    - name: Identify the pre stage group
      ec2_asg_facts:
        region: "{{ region }}"
        tags:
          env: "{{ env }}"
          project: "{{ project }}"
          role: "{{ role }}"
          stage: pre
      register: new_group
      failed_when: new_group.results | length != 1
      tags: find

    - name: Identify the live stage group
      ec2_asg_facts:
        region: "{{ region }}"
        tags:
          env: "{{ env }}"
          project: "{{ project }}"
          role: "{{ role }}"
          stage: live
      register: current_group
      failed_when: current_group.results | length > 1
      tags: find

    - name: Identify the post stage group
      ec2_asg_facts:
        region: "{{ region }}"
        tags:
          env: "{{ env }}"
          project: "{{ project }}"
          role: "{{ role }}"
          stage: post
      register: post_group
      tags: find


- import_playbook: plays/asg-mutex-pre.yml
  vars:
    asg_name: "{{ current_group.results[0].auto_scaling_group_name }}"
  when: current_group.results | length == 1
  tags: mutex


- import_playbook: plays/asg-mutex-pre.yml
  vars:
    asg_name: "{{ new_group.results[0].auto_scaling_group_name }}"
  tags: mutex


- hosts: localhost
  connection: local

  tasks:

    - name: Terminate any existing post stage group
      ec2_asg:
        region: "{{ region }}"
        name: "{{ item.auto_scaling_group_name }}"
        state: absent
      with_items: "{{ post_group.results }}"

    - name: Transition pre to live
      ec2_asg_target_groups:
        region: "{{ region }}"
        name: "{{ new_group.results[0].auto_scaling_group_name }}"
        target_groups:
          - "{{ customer }}-{{ project }}-{{ env }}-{{ role }}-live"
      when: current_group.results | length == 0
      tags: cutover

    - name: Perform cutover from pre to live, and live to post
      ec2_asg_cutover_target_groups:
        region: "{{ region }}"
        current_group_name: "{{ current_group.results[0].auto_scaling_group_name }}"
        new_group_name: "{{ new_group.results[0].auto_scaling_group_name }}"
        rollback_on_failure: yes
        standby_target_group_arns: "{{ elb_target_group_arns[region][project][env][role]['post'] }}"
        wait_timeout: 300
      register: cutover
      when: current_group.results | length == 1
      tags: cutover

    - name: Tag the now live stage group
      ec2_asg:
        region: "{{ region }}"
        name: "{{ new_group.results[0].auto_scaling_group_name }}"
        health_check_type: "{{ new_group.results[0].health_check_type }}" # required to prevent resetting to the default
        tags: "{{ new_group.results[0].tags | format_asg_tags | symmetric_difference(new_group.results[0].tags | format_asg_tags | selectattr('stage', 'defined') | list) | union([{'stage': 'live', 'propagate_at_launch': False}, {'deploy_timestamp': date_time_numeric, 'propagate_at_launch': False}]) }}"

    - name: Tag the now post stage group
      ec2_asg:
        region: "{{ region }}"
        name: "{{ current_group.results[0].auto_scaling_group_name }}"
        health_check_type: "{{ current_group.results[0].health_check_type }}" # required to prevent resetting to the default
        tags: "{{ current_group.results[0].tags | format_asg_tags | symmetric_difference(current_group.results[0].tags | format_asg_tags | selectattr('stage', 'defined') | list) | union([{'stage': 'post', 'propagate_at_launch': False}, {'deploy_timestamp': date_time_numeric, 'propagate_at_launch': False}]) }}"
      when: cutover is changed


- import_playbook: plays/asg-mutex-post.yml
  vars:
    asg_name: "{{ current_group.results[0].auto_scaling_group_name }}"
  when: current_group.results | length == 1
  tags: mutex


- import_playbook: plays/asg-mutex-post.yml
  vars:
    asg_name: "{{ new_group.results[0].auto_scaling_group_name }}"
  tags: mutex


# vim: set ft=ansible ts=2 sts=2 sw=2 expandtab:
