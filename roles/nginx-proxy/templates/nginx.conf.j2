user {{ nginx.user }};
worker_processes {{ nginx.worker_processes }};
pid {{ nginx.pid }};

events {
    worker_connections {{ nginx.worker_connections }};
}

http {
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    gzip on;

    client_max_body_size 10m;

    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Server $host;
    proxy_set_header X-Real-IP $remote_addr;

    upstream app {
        server {{ nginx.proxy_pass }} fail_timeout=0;
    }

    server {
        listen 80;
        server_name {{ nginx.server_name }};

        location /health {
{% if 'mock_health' in nginx and nginx.mock_health | bool %}
            return 200 'Healthy!';
            add_header Content-Type text/plain;
{% else %}
            proxy_pass http://app;
            proxy_redirect default;
{% endif %}
        }

{% if 'enforce_ssl' in nginx and nginx.enforce_ssl | bool and 'ssl_cert' in nginx and nginx.ssl_cert and 'ssl_key' in nginx and nginx.ssl_key %}
        location / {
            return 301 https://$host$request_uri;
        }
{% else %}
{% if 'enforce_ssl' in nginx and nginx.enforce_ssl | bool %}
        if ($http_x_forwarded_proto = 'http') {
            return 301 https://$host$request_uri;
        }
{% endif %}
        root /srv/www;
        try_files $uri @app;

        location @app {
            proxy_pass http://app;
            proxy_redirect default;
{% if 'enforce_ssl' in nginx and nginx.enforce_ssl | bool %}
            proxy_redirect http:// https://;
{% endif %}
        }
{% endif %}
    }

{% if 'ssl_cert' in nginx and nginx.ssl_cert and 'ssl_key' in nginx and nginx.ssl_key %}
    server {
        listen 443;
        ssl on;
        ssl_certificate {{ nginx.ssl_cert }};
        ssl_certificate_key {{ nginx.ssl_key }};

        root /srv/www;
        try_files $uri @app;

{% if 'mock_health' in nginx and nginx.mock_health | bool %}
        location /health {
            return 200 'Healthy!';
            add_header Content-Type text/plain;
        }
{% endif %}

        location @app {
            proxy_pass http://app;
            proxy_redirect default;
        }
    }
{% endif %}

}

# vim: set ts=4 sts=4 sw=4 et:
